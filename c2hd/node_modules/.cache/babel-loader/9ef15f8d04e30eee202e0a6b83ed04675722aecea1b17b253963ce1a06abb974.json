{"ast":null,"code":"/*!\r\n * content-disposition\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = contentDisposition;\nmodule.exports.parse = parse;\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar basename = require('path').basename;\nvar Buffer = require('safe-buffer').Buffer;\n\n/**\r\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\r\n * @private\r\n */\n\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g; // eslint-disable-line no-control-regex\n\n/**\r\n * RegExp to match percent encoding escape.\r\n * @private\r\n */\n\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;\n\n/**\r\n * RegExp to match non-latin1 characters.\r\n * @private\r\n */\n\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g;\n\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n * @private\r\n */\n\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g; // eslint-disable-line no-control-regex\n\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n * @private\r\n */\n\nvar QUOTE_REGEXP = /([\\\\\"])/g;\n\n/**\r\n * RegExp for various RFC 2616 grammar\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * HT            = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n * @private\r\n */\n\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g; // eslint-disable-line no-control-regex\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/;\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;\n\n/**\r\n * RegExp for various RFC 5987 grammar\r\n *\r\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\r\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\r\n * mime-charset  = 1*mime-charsetc\r\n * mime-charsetc = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\r\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\r\n *               / \"{\" / \"}\" / \"~\"\r\n * language      = ( 2*3ALPHA [ extlang ] )\r\n *               / 4ALPHA\r\n *               / 5*8ALPHA\r\n * extlang       = *3( \"-\" 3ALPHA )\r\n * value-chars   = *( pct-encoded / attr-char )\r\n * pct-encoded   = \"%\" HEXDIG HEXDIG\r\n * attr-char     = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\r\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n * @private\r\n */\n\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;\n\n/**\r\n * RegExp for various RFC 6266 grammar\r\n *\r\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\r\n * disp-ext-type    = token\r\n * disposition-parm = filename-parm | disp-ext-parm\r\n * filename-parm    = \"filename\" \"=\" value\r\n *                  | \"filename*\" \"=\" ext-value\r\n * disp-ext-parm    = token \"=\" value\r\n *                  | ext-token \"=\" ext-value\r\n * ext-token        = <the characters in token, followed by \"*\">\r\n * @private\r\n */\n\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/; // eslint-disable-line no-control-regex\n\n/**\r\n * Create an attachment Content-Disposition header.\r\n *\r\n * @param {string} [filename]\r\n * @param {object} [options]\r\n * @param {string} [options.type=attachment]\r\n * @param {string|boolean} [options.fallback=true]\r\n * @return {string}\r\n * @public\r\n */\n\nfunction contentDisposition(filename, options) {\n  var opts = options || {};\n\n  // get type\n  var type = opts.type || 'attachment';\n\n  // get parameters\n  var params = createparams(filename, opts.fallback);\n\n  // format into string\n  return format(new ContentDisposition(type, params));\n}\n\n/**\r\n * Create parameters object from filename and fallback.\r\n *\r\n * @param {string} [filename]\r\n * @param {string|boolean} [fallback=true]\r\n * @return {object}\r\n * @private\r\n */\n\nfunction createparams(filename, fallback) {\n  if (filename === undefined) {\n    return;\n  }\n  var params = {};\n  if (typeof filename !== 'string') {\n    throw new TypeError('filename must be a string');\n  }\n\n  // fallback defaults to true\n  if (fallback === undefined) {\n    fallback = true;\n  }\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\n    throw new TypeError('fallback must be a string or boolean');\n  }\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\n    throw new TypeError('fallback must be ISO-8859-1 string');\n  }\n\n  // restrict to file base name\n  var name = basename(filename);\n\n  // determine if name is suitable for quoted string\n  var isQuotedString = TEXT_REGEXP.test(name);\n\n  // generate fallback name\n  var fallbackName = typeof fallback !== 'string' ? fallback && getlatin1(name) : basename(fallback);\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name;\n\n  // set extended filename parameter\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\n    params['filename*'] = name;\n  }\n\n  // set filename parameter\n  if (isQuotedString || hasFallback) {\n    params.filename = hasFallback ? fallbackName : name;\n  }\n  return params;\n}\n\n/**\r\n * Format object to Content-Disposition header.\r\n *\r\n * @param {object} obj\r\n * @param {string} obj.type\r\n * @param {object} [obj.parameters]\r\n * @return {string}\r\n * @private\r\n */\n\nfunction format(obj) {\n  var parameters = obj.parameters;\n  var type = obj.type;\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  }\n\n  // start with normalized type\n  var string = String(type).toLowerCase();\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param;\n    var params = Object.keys(parameters).sort();\n    for (var i = 0; i < params.length; i++) {\n      param = params[i];\n      var val = param.substr(-1) === '*' ? ustring(parameters[param]) : qstring(parameters[param]);\n      string += '; ' + param + '=' + val;\n    }\n  }\n  return string;\n}\n\n/**\r\n * Decode a RFC 5987 field value (gracefully).\r\n *\r\n * @param {string} str\r\n * @return {string}\r\n * @private\r\n */\n\nfunction decodefield(str) {\n  var match = EXT_VALUE_REGEXP.exec(str);\n  if (!match) {\n    throw new TypeError('invalid extended field value');\n  }\n  var charset = match[1].toLowerCase();\n  var encoded = match[2];\n  var value;\n\n  // to binary string\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);\n  switch (charset) {\n    case 'iso-8859-1':\n      value = getlatin1(binary);\n      break;\n    case 'utf-8':\n      value = Buffer.from(binary, 'binary').toString('utf8');\n      break;\n    default:\n      throw new TypeError('unsupported charset in extended field');\n  }\n  return value;\n}\n\n/**\r\n * Get ISO-8859-1 version of string.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction getlatin1(val) {\n  // simple Unicode -> ISO-8859-1 transformation\n  return String(val).replace(NON_LATIN1_REGEXP, '?');\n}\n\n/**\r\n * Parse Content-Disposition header string.\r\n *\r\n * @param {string} string\r\n * @return {object}\r\n * @public\r\n */\n\nfunction parse(string) {\n  if (!string || typeof string !== 'string') {\n    throw new TypeError('argument string is required');\n  }\n  var match = DISPOSITION_TYPE_REGEXP.exec(string);\n  if (!match) {\n    throw new TypeError('invalid type format');\n  }\n\n  // normalize type\n  var index = match[0].length;\n  var type = match[1].toLowerCase();\n  var key;\n  var names = [];\n  var params = {};\n  var value;\n\n  // calculate index to start at\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';' ? index - 1 : index;\n\n  // match parameters\n  while (match = PARAM_REGEXP.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format');\n    }\n    index += match[0].length;\n    key = match[1].toLowerCase();\n    value = match[2];\n    if (names.indexOf(key) !== -1) {\n      throw new TypeError('invalid duplicate parameter');\n    }\n    names.push(key);\n    if (key.indexOf('*') + 1 === key.length) {\n      // decode extended value\n      key = key.slice(0, -1);\n      value = decodefield(value);\n\n      // overwrite existing value\n      params[key] = value;\n      continue;\n    }\n    if (typeof params[key] === 'string') {\n      continue;\n    }\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');\n    }\n    params[key] = value;\n  }\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format');\n  }\n  return new ContentDisposition(type, params);\n}\n\n/**\r\n * Percent decode a single character.\r\n *\r\n * @param {string} str\r\n * @param {string} hex\r\n * @return {string}\r\n * @private\r\n */\n\nfunction pdecode(str, hex) {\n  return String.fromCharCode(parseInt(hex, 16));\n}\n\n/**\r\n * Percent encode a single character.\r\n *\r\n * @param {string} char\r\n * @return {string}\r\n * @private\r\n */\n\nfunction pencode(char) {\n  return '%' + String(char).charCodeAt(0).toString(16).toUpperCase();\n}\n\n/**\r\n * Quote a string for HTTP.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction qstring(val) {\n  var str = String(val);\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"';\n}\n\n/**\r\n * Encode a Unicode string for HTTP (RFC 5987).\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction ustring(val) {\n  var str = String(val);\n\n  // percent encode as UTF-8\n  var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);\n  return 'UTF-8\\'\\'' + encoded;\n}\n\n/**\r\n * Class for parsed Content-Disposition header for v8 optimization\r\n *\r\n * @public\r\n * @param {string} type\r\n * @param {object} parameters\r\n * @constructor\r\n */\n\nfunction ContentDisposition(type, parameters) {\n  this.type = type;\n  this.parameters = parameters;\n}","map":{"version":3,"names":["module","exports","contentDisposition","parse","basename","require","Buffer","ENCODE_URL_ATTR_CHAR_REGEXP","HEX_ESCAPE_REGEXP","HEX_ESCAPE_REPLACE_REGEXP","NON_LATIN1_REGEXP","QESC_REGEXP","QUOTE_REGEXP","PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","EXT_VALUE_REGEXP","DISPOSITION_TYPE_REGEXP","filename","options","opts","type","params","createparams","fallback","format","ContentDisposition","undefined","TypeError","test","name","isQuotedString","fallbackName","getlatin1","hasFallback","obj","parameters","string","String","toLowerCase","param","Object","keys","sort","i","length","val","substr","ustring","qstring","decodefield","str","match","exec","charset","encoded","value","binary","replace","pdecode","from","toString","index","key","names","lastIndex","indexOf","push","slice","hex","fromCharCode","parseInt","pencode","char","charCodeAt","toUpperCase","encodeURIComponent"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/content-disposition/index.js"],"sourcesContent":["/*!\r\n * content-disposition\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = contentDisposition\r\nmodule.exports.parse = parse\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar basename = require('path').basename\r\nvar Buffer = require('safe-buffer').Buffer\r\n\r\n/**\r\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\r\n * @private\r\n */\r\n\r\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * RegExp to match percent encoding escape.\r\n * @private\r\n */\r\n\r\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/\r\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g\r\n\r\n/**\r\n * RegExp to match non-latin1 characters.\r\n * @private\r\n */\r\n\r\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n * @private\r\n */\r\n\r\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n * @private\r\n */\r\n\r\nvar QUOTE_REGEXP = /([\\\\\"])/g\r\n\r\n/**\r\n * RegExp for various RFC 2616 grammar\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * HT            = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n * @private\r\n */\r\n\r\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g // eslint-disable-line no-control-regex\r\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/\r\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/\r\n\r\n/**\r\n * RegExp for various RFC 5987 grammar\r\n *\r\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\r\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\r\n * mime-charset  = 1*mime-charsetc\r\n * mime-charsetc = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\r\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\r\n *               / \"{\" / \"}\" / \"~\"\r\n * language      = ( 2*3ALPHA [ extlang ] )\r\n *               / 4ALPHA\r\n *               / 5*8ALPHA\r\n * extlang       = *3( \"-\" 3ALPHA )\r\n * value-chars   = *( pct-encoded / attr-char )\r\n * pct-encoded   = \"%\" HEXDIG HEXDIG\r\n * attr-char     = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\r\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n * @private\r\n */\r\n\r\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/\r\n\r\n/**\r\n * RegExp for various RFC 6266 grammar\r\n *\r\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\r\n * disp-ext-type    = token\r\n * disposition-parm = filename-parm | disp-ext-parm\r\n * filename-parm    = \"filename\" \"=\" value\r\n *                  | \"filename*\" \"=\" ext-value\r\n * disp-ext-parm    = token \"=\" value\r\n *                  | ext-token \"=\" ext-value\r\n * ext-token        = <the characters in token, followed by \"*\">\r\n * @private\r\n */\r\n\r\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/ // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * Create an attachment Content-Disposition header.\r\n *\r\n * @param {string} [filename]\r\n * @param {object} [options]\r\n * @param {string} [options.type=attachment]\r\n * @param {string|boolean} [options.fallback=true]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction contentDisposition (filename, options) {\r\n  var opts = options || {}\r\n\r\n  // get type\r\n  var type = opts.type || 'attachment'\r\n\r\n  // get parameters\r\n  var params = createparams(filename, opts.fallback)\r\n\r\n  // format into string\r\n  return format(new ContentDisposition(type, params))\r\n}\r\n\r\n/**\r\n * Create parameters object from filename and fallback.\r\n *\r\n * @param {string} [filename]\r\n * @param {string|boolean} [fallback=true]\r\n * @return {object}\r\n * @private\r\n */\r\n\r\nfunction createparams (filename, fallback) {\r\n  if (filename === undefined) {\r\n    return\r\n  }\r\n\r\n  var params = {}\r\n\r\n  if (typeof filename !== 'string') {\r\n    throw new TypeError('filename must be a string')\r\n  }\r\n\r\n  // fallback defaults to true\r\n  if (fallback === undefined) {\r\n    fallback = true\r\n  }\r\n\r\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\r\n    throw new TypeError('fallback must be a string or boolean')\r\n  }\r\n\r\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\r\n    throw new TypeError('fallback must be ISO-8859-1 string')\r\n  }\r\n\r\n  // restrict to file base name\r\n  var name = basename(filename)\r\n\r\n  // determine if name is suitable for quoted string\r\n  var isQuotedString = TEXT_REGEXP.test(name)\r\n\r\n  // generate fallback name\r\n  var fallbackName = typeof fallback !== 'string'\r\n    ? fallback && getlatin1(name)\r\n    : basename(fallback)\r\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name\r\n\r\n  // set extended filename parameter\r\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\r\n    params['filename*'] = name\r\n  }\r\n\r\n  // set filename parameter\r\n  if (isQuotedString || hasFallback) {\r\n    params.filename = hasFallback\r\n      ? fallbackName\r\n      : name\r\n  }\r\n\r\n  return params\r\n}\r\n\r\n/**\r\n * Format object to Content-Disposition header.\r\n *\r\n * @param {object} obj\r\n * @param {string} obj.type\r\n * @param {object} [obj.parameters]\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction format (obj) {\r\n  var parameters = obj.parameters\r\n  var type = obj.type\r\n\r\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  // start with normalized type\r\n  var string = String(type).toLowerCase()\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      var val = param.substr(-1) === '*'\r\n        ? ustring(parameters[param])\r\n        : qstring(parameters[param])\r\n\r\n      string += '; ' + param + '=' + val\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Decode a RFC 5987 field value (gracefully).\r\n *\r\n * @param {string} str\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction decodefield (str) {\r\n  var match = EXT_VALUE_REGEXP.exec(str)\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid extended field value')\r\n  }\r\n\r\n  var charset = match[1].toLowerCase()\r\n  var encoded = match[2]\r\n  var value\r\n\r\n  // to binary string\r\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode)\r\n\r\n  switch (charset) {\r\n    case 'iso-8859-1':\r\n      value = getlatin1(binary)\r\n      break\r\n    case 'utf-8':\r\n      value = Buffer.from(binary, 'binary').toString('utf8')\r\n      break\r\n    default:\r\n      throw new TypeError('unsupported charset in extended field')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * Get ISO-8859-1 version of string.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction getlatin1 (val) {\r\n  // simple Unicode -> ISO-8859-1 transformation\r\n  return String(val).replace(NON_LATIN1_REGEXP, '?')\r\n}\r\n\r\n/**\r\n * Parse Content-Disposition header string.\r\n *\r\n * @param {string} string\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse (string) {\r\n  if (!string || typeof string !== 'string') {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  var match = DISPOSITION_TYPE_REGEXP.exec(string)\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid type format')\r\n  }\r\n\r\n  // normalize type\r\n  var index = match[0].length\r\n  var type = match[1].toLowerCase()\r\n\r\n  var key\r\n  var names = []\r\n  var params = {}\r\n  var value\r\n\r\n  // calculate index to start at\r\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';'\r\n    ? index - 1\r\n    : index\r\n\r\n  // match parameters\r\n  while ((match = PARAM_REGEXP.exec(string))) {\r\n    if (match.index !== index) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n\r\n    index += match[0].length\r\n    key = match[1].toLowerCase()\r\n    value = match[2]\r\n\r\n    if (names.indexOf(key) !== -1) {\r\n      throw new TypeError('invalid duplicate parameter')\r\n    }\r\n\r\n    names.push(key)\r\n\r\n    if (key.indexOf('*') + 1 === key.length) {\r\n      // decode extended value\r\n      key = key.slice(0, -1)\r\n      value = decodefield(value)\r\n\r\n      // overwrite existing value\r\n      params[key] = value\r\n      continue\r\n    }\r\n\r\n    if (typeof params[key] === 'string') {\r\n      continue\r\n    }\r\n\r\n    if (value[0] === '\"') {\r\n      // remove quotes and escapes\r\n      value = value\r\n        .substr(1, value.length - 2)\r\n        .replace(QESC_REGEXP, '$1')\r\n    }\r\n\r\n    params[key] = value\r\n  }\r\n\r\n  if (index !== -1 && index !== string.length) {\r\n    throw new TypeError('invalid parameter format')\r\n  }\r\n\r\n  return new ContentDisposition(type, params)\r\n}\r\n\r\n/**\r\n * Percent decode a single character.\r\n *\r\n * @param {string} str\r\n * @param {string} hex\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction pdecode (str, hex) {\r\n  return String.fromCharCode(parseInt(hex, 16))\r\n}\r\n\r\n/**\r\n * Percent encode a single character.\r\n *\r\n * @param {string} char\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction pencode (char) {\r\n  return '%' + String(char)\r\n    .charCodeAt(0)\r\n    .toString(16)\r\n    .toUpperCase()\r\n}\r\n\r\n/**\r\n * Quote a string for HTTP.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction qstring (val) {\r\n  var str = String(val)\r\n\r\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Encode a Unicode string for HTTP (RFC 5987).\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction ustring (val) {\r\n  var str = String(val)\r\n\r\n  // percent encode as UTF-8\r\n  var encoded = encodeURIComponent(str)\r\n    .replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode)\r\n\r\n  return 'UTF-8\\'\\'' + encoded\r\n}\r\n\r\n/**\r\n * Class for parsed Content-Disposition header for v8 optimization\r\n *\r\n * @public\r\n * @param {string} type\r\n * @param {object} parameters\r\n * @constructor\r\n */\r\n\r\nfunction ContentDisposition (type, parameters) {\r\n  this.type = type\r\n  this.parameters = parameters\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}