{"ast":null,"code":"/*!\r\n * content-type\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\r\n *\r\n * parameter     = token \"=\" ( token / quoted-string )\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\r\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\r\n * obs-text      = %x80-FF\r\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\n\n/**\r\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\r\n *\r\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n * obs-text    = %x80-FF\r\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g;\n\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\r\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g;\n\n/**\r\n * RegExp to match type in RFC 7231 sec 3.1.1.1\r\n *\r\n * media-type = type \"/\" subtype\r\n * type       = token\r\n * subtype    = token\r\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nexports.format = format;\nexports.parse = parse;\n\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @public\r\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required');\n  }\n  var parameters = obj.parameters;\n  var type = obj.type;\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  }\n  var string = type;\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param;\n    var params = Object.keys(parameters).sort();\n    for (var i = 0; i < params.length; i++) {\n      param = params[i];\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name');\n      }\n      string += '; ' + param + '=' + qstring(parameters[param]);\n    }\n  }\n  return string;\n}\n\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @public\r\n */\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object' ? getcontenttype(string) : string;\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n  var index = header.indexOf(';');\n  var type = index !== -1 ? header.substr(0, index).trim() : header.trim();\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type');\n  }\n  var obj = new ContentType(type.toLowerCase());\n\n  // parse parameters\n  if (index !== -1) {\n    var key;\n    var match;\n    var value;\n    PARAM_REGEXP.lastIndex = index;\n    while (match = PARAM_REGEXP.exec(header)) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format');\n      }\n      index += match[0].length;\n      key = match[1].toLowerCase();\n      value = match[2];\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');\n      }\n      obj.parameters[key] = value;\n    }\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format');\n    }\n  }\n  return obj;\n}\n\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @private\r\n */\n\nfunction getcontenttype(obj) {\n  var header;\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type');\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type'];\n  }\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object');\n  }\n  return header;\n}\n\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction qstring(val) {\n  var str = String(val);\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str;\n  }\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value');\n  }\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"';\n}\n\n/**\r\n * Class to represent a content type.\r\n * @private\r\n */\nfunction ContentType(type) {\n  this.parameters = Object.create(null);\n  this.type = type;\n}","map":{"version":3,"names":["PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","QESC_REGEXP","QUOTE_REGEXP","TYPE_REGEXP","exports","format","parse","obj","TypeError","parameters","type","test","string","param","params","Object","keys","sort","i","length","qstring","header","getcontenttype","index","indexOf","substr","trim","ContentType","toLowerCase","key","match","value","lastIndex","exec","replace","getHeader","headers","val","str","String","create"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/content-type/index.js"],"sourcesContent":["/*!\r\n * content-type\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\r\n *\r\n * parameter     = token \"=\" ( token / quoted-string )\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\r\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\r\n * obs-text      = %x80-FF\r\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n */\r\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\r\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\r\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\r\n *\r\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n * obs-text    = %x80-FF\r\n */\r\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\r\n */\r\nvar QUOTE_REGEXP = /([\\\\\"])/g\r\n\r\n/**\r\n * RegExp to match type in RFC 7231 sec 3.1.1.1\r\n *\r\n * media-type = type \"/\" subtype\r\n * type       = token\r\n * subtype    = token\r\n */\r\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.format = format\r\nexports.parse = parse\r\n\r\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction format (obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw new TypeError('argument obj is required')\r\n  }\r\n\r\n  var parameters = obj.parameters\r\n  var type = obj.type\r\n\r\n  if (!type || !TYPE_REGEXP.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  var string = type\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      if (!TOKEN_REGEXP.test(param)) {\r\n        throw new TypeError('invalid parameter name')\r\n      }\r\n\r\n      string += '; ' + param + '=' + qstring(parameters[param])\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction parse (string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  // support req/res-like objects as argument\r\n  var header = typeof string === 'object'\r\n    ? getcontenttype(string)\r\n    : string\r\n\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  var index = header.indexOf(';')\r\n  var type = index !== -1\r\n    ? header.substr(0, index).trim()\r\n    : header.trim()\r\n\r\n  if (!TYPE_REGEXP.test(type)) {\r\n    throw new TypeError('invalid media type')\r\n  }\r\n\r\n  var obj = new ContentType(type.toLowerCase())\r\n\r\n  // parse parameters\r\n  if (index !== -1) {\r\n    var key\r\n    var match\r\n    var value\r\n\r\n    PARAM_REGEXP.lastIndex = index\r\n\r\n    while ((match = PARAM_REGEXP.exec(header))) {\r\n      if (match.index !== index) {\r\n        throw new TypeError('invalid parameter format')\r\n      }\r\n\r\n      index += match[0].length\r\n      key = match[1].toLowerCase()\r\n      value = match[2]\r\n\r\n      if (value[0] === '\"') {\r\n        // remove quotes and escapes\r\n        value = value\r\n          .substr(1, value.length - 2)\r\n          .replace(QESC_REGEXP, '$1')\r\n      }\r\n\r\n      obj.parameters[key] = value\r\n    }\r\n\r\n    if (index !== header.length) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @private\r\n */\r\n\r\nfunction getcontenttype (obj) {\r\n  var header\r\n\r\n  if (typeof obj.getHeader === 'function') {\r\n    // res-like\r\n    header = obj.getHeader('content-type')\r\n  } else if (typeof obj.headers === 'object') {\r\n    // req-like\r\n    header = obj.headers && obj.headers['content-type']\r\n  }\r\n\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('content-type header is missing from object')\r\n  }\r\n\r\n  return header\r\n}\r\n\r\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction qstring (val) {\r\n  var str = String(val)\r\n\r\n  // no need to quote tokens\r\n  if (TOKEN_REGEXP.test(str)) {\r\n    return str\r\n  }\r\n\r\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\r\n    throw new TypeError('invalid parameter value')\r\n  }\r\n\r\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Class to represent a content type.\r\n * @private\r\n */\r\nfunction ContentType (type) {\r\n  this.parameters = Object.create(null)\r\n  this.type = type\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}