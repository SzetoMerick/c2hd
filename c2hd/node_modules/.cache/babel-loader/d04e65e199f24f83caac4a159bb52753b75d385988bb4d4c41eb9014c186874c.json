{"ast":null,"code":"/*!\r\n * parseurl\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar url = require('url');\nvar parse = url.parse;\nvar Url = url.Url;\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = parseurl;\nmodule.exports.original = originalurl;\n\n/**\r\n * Parse the `req` url with memoization.\r\n *\r\n * @param {ServerRequest} req\r\n * @return {Object}\r\n * @public\r\n */\n\nfunction parseurl(req) {\n  var url = req.url;\n  if (url === undefined) {\n    // URL is undefined\n    return undefined;\n  }\n  var parsed = req._parsedUrl;\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed;\n  }\n\n  // Parse the URL\n  parsed = fastparse(url);\n  parsed._raw = url;\n  return req._parsedUrl = parsed;\n}\n;\n\n/**\r\n * Parse the `req` original url with fallback and memoization.\r\n *\r\n * @param {ServerRequest} req\r\n * @return {Object}\r\n * @public\r\n */\n\nfunction originalurl(req) {\n  var url = req.originalUrl;\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req);\n  }\n  var parsed = req._parsedOriginalUrl;\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed;\n  }\n\n  // Parse the URL\n  parsed = fastparse(url);\n  parsed._raw = url;\n  return req._parsedOriginalUrl = parsed;\n}\n;\n\n/**\r\n * Parse the `str` url with fast-path short-cut.\r\n *\r\n * @param {string} str\r\n * @return {Object}\r\n * @private\r\n */\n\nfunction fastparse(str) {\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {\n    return parse(str);\n  }\n  var pathname = str;\n  var query = null;\n  var search = null;\n\n  // This takes the regexp from https://github.com/joyent/node/pull/7878\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\n  // And unrolls it into a for loop\n  for (var i = 1; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x3f:\n        /* ?  */\n        if (search === null) {\n          pathname = str.substring(0, i);\n          query = str.substring(i + 1);\n          search = str.substring(i);\n        }\n        break;\n      case 0x09: /* \\t */\n      case 0x0a: /* \\n */\n      case 0x0c: /* \\f */\n      case 0x0d: /* \\r */\n      case 0x20: /*    */\n      case 0x23: /* #  */\n      case 0xa0:\n      case 0xfeff:\n        return parse(str);\n    }\n  }\n  var url = Url !== undefined ? new Url() : {};\n  url.path = str;\n  url.href = str;\n  url.pathname = pathname;\n  if (search !== null) {\n    url.query = query;\n    url.search = search;\n  }\n  return url;\n}\n\n/**\r\n * Determine if parsed is still fresh for url.\r\n *\r\n * @param {string} url\r\n * @param {object} parsedUrl\r\n * @return {boolean}\r\n * @private\r\n */\n\nfunction fresh(url, parsedUrl) {\n  return typeof parsedUrl === 'object' && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url;\n}","map":{"version":3,"names":["url","require","parse","Url","module","exports","parseurl","original","originalurl","req","undefined","parsed","_parsedUrl","fresh","fastparse","_raw","originalUrl","_parsedOriginalUrl","str","charCodeAt","pathname","query","search","i","length","substring","path","href","parsedUrl"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/parseurl/index.js"],"sourcesContent":["/*!\r\n * parseurl\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar url = require('url')\r\nvar parse = url.parse\r\nvar Url = url.Url\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = parseurl\r\nmodule.exports.original = originalurl\r\n\r\n/**\r\n * Parse the `req` url with memoization.\r\n *\r\n * @param {ServerRequest} req\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction parseurl (req) {\r\n  var url = req.url\r\n\r\n  if (url === undefined) {\r\n    // URL is undefined\r\n    return undefined\r\n  }\r\n\r\n  var parsed = req._parsedUrl\r\n\r\n  if (fresh(url, parsed)) {\r\n    // Return cached URL parse\r\n    return parsed\r\n  }\r\n\r\n  // Parse the URL\r\n  parsed = fastparse(url)\r\n  parsed._raw = url\r\n\r\n  return (req._parsedUrl = parsed)\r\n};\r\n\r\n/**\r\n * Parse the `req` original url with fallback and memoization.\r\n *\r\n * @param {ServerRequest} req\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction originalurl (req) {\r\n  var url = req.originalUrl\r\n\r\n  if (typeof url !== 'string') {\r\n    // Fallback\r\n    return parseurl(req)\r\n  }\r\n\r\n  var parsed = req._parsedOriginalUrl\r\n\r\n  if (fresh(url, parsed)) {\r\n    // Return cached URL parse\r\n    return parsed\r\n  }\r\n\r\n  // Parse the URL\r\n  parsed = fastparse(url)\r\n  parsed._raw = url\r\n\r\n  return (req._parsedOriginalUrl = parsed)\r\n};\r\n\r\n/**\r\n * Parse the `str` url with fast-path short-cut.\r\n *\r\n * @param {string} str\r\n * @return {Object}\r\n * @private\r\n */\r\n\r\nfunction fastparse (str) {\r\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {\r\n    return parse(str)\r\n  }\r\n\r\n  var pathname = str\r\n  var query = null\r\n  var search = null\r\n\r\n  // This takes the regexp from https://github.com/joyent/node/pull/7878\r\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\r\n  // And unrolls it into a for loop\r\n  for (var i = 1; i < str.length; i++) {\r\n    switch (str.charCodeAt(i)) {\r\n      case 0x3f: /* ?  */\r\n        if (search === null) {\r\n          pathname = str.substring(0, i)\r\n          query = str.substring(i + 1)\r\n          search = str.substring(i)\r\n        }\r\n        break\r\n      case 0x09: /* \\t */\r\n      case 0x0a: /* \\n */\r\n      case 0x0c: /* \\f */\r\n      case 0x0d: /* \\r */\r\n      case 0x20: /*    */\r\n      case 0x23: /* #  */\r\n      case 0xa0:\r\n      case 0xfeff:\r\n        return parse(str)\r\n    }\r\n  }\r\n\r\n  var url = Url !== undefined\r\n    ? new Url()\r\n    : {}\r\n\r\n  url.path = str\r\n  url.href = str\r\n  url.pathname = pathname\r\n\r\n  if (search !== null) {\r\n    url.query = query\r\n    url.search = search\r\n  }\r\n\r\n  return url\r\n}\r\n\r\n/**\r\n * Determine if parsed is still fresh for url.\r\n *\r\n * @param {string} url\r\n * @param {object} parsedUrl\r\n * @return {boolean}\r\n * @private\r\n */\r\n\r\nfunction fresh (url, parsedUrl) {\r\n  return typeof parsedUrl === 'object' &&\r\n    parsedUrl !== null &&\r\n    (Url === undefined || parsedUrl instanceof Url) &&\r\n    parsedUrl._raw === url\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}