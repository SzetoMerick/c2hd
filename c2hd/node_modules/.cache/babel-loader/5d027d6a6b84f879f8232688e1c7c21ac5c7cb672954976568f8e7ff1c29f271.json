{"ast":null,"code":"/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = preferredEncodings;\nmodule.exports.preferredEncodings = preferredEncodings;\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n\n/**\r\n * Parse the Accept-Encoding header.\r\n * @private\r\n */\n\nfunction parseAcceptEncoding(accept) {\n  var accepts = accept.split(',');\n  var hasIdentity = false;\n  var minQuality = 1;\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var encoding = parseEncoding(accepts[i].trim(), i);\n    if (encoding) {\n      accepts[j++] = encoding;\n      hasIdentity = hasIdentity || specify('identity', encoding);\n      minQuality = Math.min(minQuality, encoding.q || 1);\n    }\n  }\n  if (!hasIdentity) {\n    /*\r\n     * If identity doesn't explicitly appear in the accept-encoding header,\r\n     * it's added to the list of acceptable encoding with the lowest q\r\n     */\n    accepts[j++] = {\n      encoding: 'identity',\n      q: minQuality,\n      i: i\n    };\n  }\n\n  // trim accepts\n  accepts.length = j;\n  return accepts;\n}\n\n/**\r\n * Parse an encoding from the Accept-Encoding header.\r\n * @private\r\n */\n\nfunction parseEncoding(str, i) {\n  var match = simpleEncodingRegExp.exec(str);\n  if (!match) return null;\n  var encoding = match[1];\n  var q = 1;\n  if (match[2]) {\n    var params = match[2].split(';');\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n  return {\n    encoding: encoding,\n    q: q,\n    i: i\n  };\n}\n\n/**\r\n * Get the priority of an encoding.\r\n * @private\r\n */\n\nfunction getEncodingPriority(encoding, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(encoding, accepted[i], index);\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n  return priority;\n}\n\n/**\r\n * Get the specificity of the encoding.\r\n * @private\r\n */\n\nfunction specify(encoding, spec, index) {\n  var s = 0;\n  if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {\n    s |= 1;\n  } else if (spec.encoding !== '*') {\n    return null;\n  }\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n;\n\n/**\r\n * Get the preferred encodings from an Accept-Encoding header.\r\n * @public\r\n */\n\nfunction preferredEncodings(accept, provided) {\n  var accepts = parseAcceptEncoding(accept || '');\n  if (!provided) {\n    // sorted list of all encodings\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);\n  }\n  var priorities = provided.map(function getPriority(type, index) {\n    return getEncodingPriority(type, accepts, index);\n  });\n\n  // sorted list of accepted encodings\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\r\n * Compare two specs.\r\n * @private\r\n */\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n\n/**\r\n * Get full encoding string.\r\n * @private\r\n */\n\nfunction getFullEncoding(spec) {\n  return spec.encoding;\n}\n\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}","map":{"version":3,"names":["module","exports","preferredEncodings","simpleEncodingRegExp","parseAcceptEncoding","accept","accepts","split","hasIdentity","minQuality","i","j","length","encoding","parseEncoding","trim","specify","Math","min","q","str","match","exec","params","p","parseFloat","getEncodingPriority","accepted","index","priority","o","s","spec","toLowerCase","provided","filter","isQuality","sort","compareSpecs","map","getFullEncoding","priorities","getPriority","type","getEncoding","indexOf","a","b"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/negotiator/lib/encoding.js"],"sourcesContent":["/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredEncodings;\r\nmodule.exports.preferredEncodings = preferredEncodings;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept-Encoding header.\r\n * @private\r\n */\r\n\r\nfunction parseAcceptEncoding(accept) {\r\n  var accepts = accept.split(',');\r\n  var hasIdentity = false;\r\n  var minQuality = 1;\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var encoding = parseEncoding(accepts[i].trim(), i);\r\n\r\n    if (encoding) {\r\n      accepts[j++] = encoding;\r\n      hasIdentity = hasIdentity || specify('identity', encoding);\r\n      minQuality = Math.min(minQuality, encoding.q || 1);\r\n    }\r\n  }\r\n\r\n  if (!hasIdentity) {\r\n    /*\r\n     * If identity doesn't explicitly appear in the accept-encoding header,\r\n     * it's added to the list of acceptable encoding with the lowest q\r\n     */\r\n    accepts[j++] = {\r\n      encoding: 'identity',\r\n      q: minQuality,\r\n      i: i\r\n    };\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse an encoding from the Accept-Encoding header.\r\n * @private\r\n */\r\n\r\nfunction parseEncoding(str, i) {\r\n  var match = simpleEncodingRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var encoding = match[1];\r\n  var q = 1;\r\n  if (match[2]) {\r\n    var params = match[2].split(';');\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].trim().split('=');\r\n      if (p[0] === 'q') {\r\n        q = parseFloat(p[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    encoding: encoding,\r\n    q: q,\r\n    i: i\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of an encoding.\r\n * @private\r\n */\r\n\r\nfunction getEncodingPriority(encoding, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(encoding, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the encoding.\r\n * @private\r\n */\r\n\r\nfunction specify(encoding, spec, index) {\r\n  var s = 0;\r\n  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){\r\n    s |= 1;\r\n  } else if (spec.encoding !== '*' ) {\r\n    return null\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n};\r\n\r\n/**\r\n * Get the preferred encodings from an Accept-Encoding header.\r\n * @public\r\n */\r\n\r\nfunction preferredEncodings(accept, provided) {\r\n  var accepts = parseAcceptEncoding(accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all encodings\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullEncoding);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getEncodingPriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted encodings\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full encoding string.\r\n * @private\r\n */\r\n\r\nfunction getFullEncoding(spec) {\r\n  return spec.encoding;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}