{"ast":null,"code":"/*!\r\n * bytes\r\n * Copyright(c) 2012-2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Jed Watson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\nvar map = {\n  b: 1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5)\n};\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\r\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\r\n *\r\n * @param {string|number} value\r\n * @param {{\r\n *  case: [string],\r\n *  decimalPlaces: [number]\r\n *  fixedDecimals: [boolean]\r\n *  thousandsSeparator: [string]\r\n *  unitSeparator: [string]\r\n *  }} [options] bytes options.\r\n *\r\n * @returns {string|number|null}\r\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n  return null;\n}\n\n/**\r\n * Format the given value in bytes into a string.\r\n *\r\n * If the value is negative, it is kept as such. If it is a float,\r\n * it is rounded.\r\n *\r\n * @param {number} value\r\n * @param {object} [options]\r\n * @param {number} [options.decimalPlaces=2]\r\n * @param {number} [options.fixedDecimals=false]\r\n * @param {string} [options.thousandsSeparator=]\r\n * @param {string} [options.unit=]\r\n * @param {string} [options.unitSeparator=]\r\n *\r\n * @returns {string|null}\r\n * @public\r\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n  var mag = Math.abs(value);\n  var thousandsSeparator = options && options.thousandsSeparator || '';\n  var unitSeparator = options && options.unitSeparator || '';\n  var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = options && options.unit || '';\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n  if (thousandsSeparator) {\n    str = str.split('.').map(function (s, i) {\n      return i === 0 ? s.replace(formatThousandsRegExp, thousandsSeparator) : s;\n    }).join('.');\n  }\n  return str + unitSeparator + unit;\n}\n\n/**\r\n * Parse the string value into an integer in bytes.\r\n *\r\n * If no unit is given, it is assumed the value is in bytes.\r\n *\r\n * @param {number|string} val\r\n *\r\n * @returns {number|null}\r\n * @public\r\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b';\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n  if (isNaN(floatValue)) {\n    return null;\n  }\n  return Math.floor(map[unit] * floatValue);\n}","map":{"version":3,"names":["module","exports","bytes","format","parse","formatThousandsRegExp","formatDecimalsRegExp","map","b","kb","mb","gb","tb","Math","pow","pb","parseRegExp","value","options","Number","isFinite","mag","abs","thousandsSeparator","unitSeparator","decimalPlaces","undefined","fixedDecimals","Boolean","unit","toLowerCase","val","str","toFixed","replace","split","s","i","join","isNaN","results","exec","floatValue","parseInt","parseFloat","floor"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/raw-body/node_modules/bytes/index.js"],"sourcesContent":["/*!\r\n * bytes\r\n * Copyright(c) 2012-2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Jed Watson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = bytes;\r\nmodule.exports.format = format;\r\nmodule.exports.parse = parse;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n\r\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\r\n\r\nvar map = {\r\n  b:  1,\r\n  kb: 1 << 10,\r\n  mb: 1 << 20,\r\n  gb: 1 << 30,\r\n  tb: Math.pow(1024, 4),\r\n  pb: Math.pow(1024, 5),\r\n};\r\n\r\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\r\n\r\n/**\r\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\r\n *\r\n * @param {string|number} value\r\n * @param {{\r\n *  case: [string],\r\n *  decimalPlaces: [number]\r\n *  fixedDecimals: [boolean]\r\n *  thousandsSeparator: [string]\r\n *  unitSeparator: [string]\r\n *  }} [options] bytes options.\r\n *\r\n * @returns {string|number|null}\r\n */\r\n\r\nfunction bytes(value, options) {\r\n  if (typeof value === 'string') {\r\n    return parse(value);\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return format(value, options);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Format the given value in bytes into a string.\r\n *\r\n * If the value is negative, it is kept as such. If it is a float,\r\n * it is rounded.\r\n *\r\n * @param {number} value\r\n * @param {object} [options]\r\n * @param {number} [options.decimalPlaces=2]\r\n * @param {number} [options.fixedDecimals=false]\r\n * @param {string} [options.thousandsSeparator=]\r\n * @param {string} [options.unit=]\r\n * @param {string} [options.unitSeparator=]\r\n *\r\n * @returns {string|null}\r\n * @public\r\n */\r\n\r\nfunction format(value, options) {\r\n  if (!Number.isFinite(value)) {\r\n    return null;\r\n  }\r\n\r\n  var mag = Math.abs(value);\r\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\r\n  var unitSeparator = (options && options.unitSeparator) || '';\r\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\r\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\r\n  var unit = (options && options.unit) || '';\r\n\r\n  if (!unit || !map[unit.toLowerCase()]) {\r\n    if (mag >= map.pb) {\r\n      unit = 'PB';\r\n    } else if (mag >= map.tb) {\r\n      unit = 'TB';\r\n    } else if (mag >= map.gb) {\r\n      unit = 'GB';\r\n    } else if (mag >= map.mb) {\r\n      unit = 'MB';\r\n    } else if (mag >= map.kb) {\r\n      unit = 'KB';\r\n    } else {\r\n      unit = 'B';\r\n    }\r\n  }\r\n\r\n  var val = value / map[unit.toLowerCase()];\r\n  var str = val.toFixed(decimalPlaces);\r\n\r\n  if (!fixedDecimals) {\r\n    str = str.replace(formatDecimalsRegExp, '$1');\r\n  }\r\n\r\n  if (thousandsSeparator) {\r\n    str = str.split('.').map(function (s, i) {\r\n      return i === 0\r\n        ? s.replace(formatThousandsRegExp, thousandsSeparator)\r\n        : s\r\n    }).join('.');\r\n  }\r\n\r\n  return str + unitSeparator + unit;\r\n}\r\n\r\n/**\r\n * Parse the string value into an integer in bytes.\r\n *\r\n * If no unit is given, it is assumed the value is in bytes.\r\n *\r\n * @param {number|string} val\r\n *\r\n * @returns {number|null}\r\n * @public\r\n */\r\n\r\nfunction parse(val) {\r\n  if (typeof val === 'number' && !isNaN(val)) {\r\n    return val;\r\n  }\r\n\r\n  if (typeof val !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  // Test if the string passed is valid\r\n  var results = parseRegExp.exec(val);\r\n  var floatValue;\r\n  var unit = 'b';\r\n\r\n  if (!results) {\r\n    // Nothing could be extracted from the given string\r\n    floatValue = parseInt(val, 10);\r\n    unit = 'b'\r\n  } else {\r\n    // Retrieve the value and the unit\r\n    floatValue = parseFloat(results[1]);\r\n    unit = results[4].toLowerCase();\r\n  }\r\n\r\n  if (isNaN(floatValue)) {\r\n    return null;\r\n  }\r\n\r\n  return Math.floor(map[unit] * floatValue);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}