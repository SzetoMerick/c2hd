{"ast":null,"code":"/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar createError = require('http-errors');\nvar destroy = require('destroy');\nvar getBody = require('raw-body');\nvar iconv = require('iconv-lite');\nvar onFinished = require('on-finished');\nvar unpipe = require('unpipe');\nvar zlib = require('zlib');\n\n/**\r\n * Module exports.\r\n */\n\nmodule.exports = read;\n\n/**\r\n * Read a request into a buffer and parse.\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n * @param {function} next\r\n * @param {function} parse\r\n * @param {function} debug\r\n * @param {object} options\r\n * @private\r\n */\n\nfunction read(req, res, next, parse, debug, options) {\n  var length;\n  var opts = options;\n  var stream;\n\n  // flag as parsed\n  req._body = true;\n\n  // read options\n  var encoding = opts.encoding !== null ? opts.encoding : null;\n  var verify = opts.verify;\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate);\n    length = stream.length;\n    stream.length = undefined;\n  } catch (err) {\n    return next(err);\n  }\n\n  // set raw-body options\n  opts.length = length;\n  opts.encoding = verify ? null : encoding;\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }));\n  }\n\n  // read body\n  debug('read body');\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error;\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        });\n      } else {\n        // set status code on error\n        _error = createError(400, error);\n      }\n\n      // unpipe from stream and destroy\n      if (stream !== req) {\n        unpipe(req);\n        destroy(stream, true);\n      }\n\n      // read off entire request\n      dump(req, function onfinished() {\n        next(createError(400, _error));\n      });\n      return;\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body');\n        verify(req, res, body, encoding);\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }));\n        return;\n      }\n    }\n\n    // parse\n    var str = body;\n    try {\n      debug('parse body');\n      str = typeof body !== 'string' && encoding !== null ? iconv.decode(body, encoding) : body;\n      req.body = parse(str);\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }));\n      return;\n    }\n    next();\n  });\n}\n\n/**\r\n * Get the content stream of the request.\r\n *\r\n * @param {object} req\r\n * @param {function} debug\r\n * @param {boolean} [inflate=true]\r\n * @return {object}\r\n * @api private\r\n */\n\nfunction contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();\n  var length = req.headers['content-length'];\n  var stream;\n  debug('content-encoding \"%s\"', encoding);\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    });\n  }\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate();\n      debug('inflate body');\n      req.pipe(stream);\n      break;\n    case 'gzip':\n      stream = zlib.createGunzip();\n      debug('gunzip body');\n      req.pipe(stream);\n      break;\n    case 'identity':\n      stream = req;\n      stream.length = length;\n      break;\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      });\n  }\n  return stream;\n}\n\n/**\r\n * Dump the contents of a request.\r\n *\r\n * @param {object} req\r\n * @param {function} callback\r\n * @api private\r\n */\n\nfunction dump(req, callback) {\n  if (onFinished.isFinished(req)) {\n    callback(null);\n  } else {\n    onFinished(req, callback);\n    req.resume();\n  }\n}","map":{"version":3,"names":["createError","require","destroy","getBody","iconv","onFinished","unpipe","zlib","module","exports","read","req","res","next","parse","debug","options","length","opts","stream","_body","encoding","verify","contentstream","inflate","undefined","err","encodingExists","toUpperCase","charset","toLowerCase","type","error","body","_error","dump","onfinished","str","decode","headers","createInflate","pipe","createGunzip","callback","isFinished","resume"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/body-parser/lib/read.js"],"sourcesContent":["/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar createError = require('http-errors')\r\nvar destroy = require('destroy')\r\nvar getBody = require('raw-body')\r\nvar iconv = require('iconv-lite')\r\nvar onFinished = require('on-finished')\r\nvar unpipe = require('unpipe')\r\nvar zlib = require('zlib')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = read\r\n\r\n/**\r\n * Read a request into a buffer and parse.\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n * @param {function} next\r\n * @param {function} parse\r\n * @param {function} debug\r\n * @param {object} options\r\n * @private\r\n */\r\n\r\nfunction read (req, res, next, parse, debug, options) {\r\n  var length\r\n  var opts = options\r\n  var stream\r\n\r\n  // flag as parsed\r\n  req._body = true\r\n\r\n  // read options\r\n  var encoding = opts.encoding !== null\r\n    ? opts.encoding\r\n    : null\r\n  var verify = opts.verify\r\n\r\n  try {\r\n    // get the content stream\r\n    stream = contentstream(req, debug, opts.inflate)\r\n    length = stream.length\r\n    stream.length = undefined\r\n  } catch (err) {\r\n    return next(err)\r\n  }\r\n\r\n  // set raw-body options\r\n  opts.length = length\r\n  opts.encoding = verify\r\n    ? null\r\n    : encoding\r\n\r\n  // assert charset is supported\r\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\r\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n      charset: encoding.toLowerCase(),\r\n      type: 'charset.unsupported'\r\n    }))\r\n  }\r\n\r\n  // read body\r\n  debug('read body')\r\n  getBody(stream, opts, function (error, body) {\r\n    if (error) {\r\n      var _error\r\n\r\n      if (error.type === 'encoding.unsupported') {\r\n        // echo back charset\r\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n          charset: encoding.toLowerCase(),\r\n          type: 'charset.unsupported'\r\n        })\r\n      } else {\r\n        // set status code on error\r\n        _error = createError(400, error)\r\n      }\r\n\r\n      // unpipe from stream and destroy\r\n      if (stream !== req) {\r\n        unpipe(req)\r\n        destroy(stream, true)\r\n      }\r\n\r\n      // read off entire request\r\n      dump(req, function onfinished () {\r\n        next(createError(400, _error))\r\n      })\r\n      return\r\n    }\r\n\r\n    // verify\r\n    if (verify) {\r\n      try {\r\n        debug('verify body')\r\n        verify(req, res, body, encoding)\r\n      } catch (err) {\r\n        next(createError(403, err, {\r\n          body: body,\r\n          type: err.type || 'entity.verify.failed'\r\n        }))\r\n        return\r\n      }\r\n    }\r\n\r\n    // parse\r\n    var str = body\r\n    try {\r\n      debug('parse body')\r\n      str = typeof body !== 'string' && encoding !== null\r\n        ? iconv.decode(body, encoding)\r\n        : body\r\n      req.body = parse(str)\r\n    } catch (err) {\r\n      next(createError(400, err, {\r\n        body: str,\r\n        type: err.type || 'entity.parse.failed'\r\n      }))\r\n      return\r\n    }\r\n\r\n    next()\r\n  })\r\n}\r\n\r\n/**\r\n * Get the content stream of the request.\r\n *\r\n * @param {object} req\r\n * @param {function} debug\r\n * @param {boolean} [inflate=true]\r\n * @return {object}\r\n * @api private\r\n */\r\n\r\nfunction contentstream (req, debug, inflate) {\r\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\r\n  var length = req.headers['content-length']\r\n  var stream\r\n\r\n  debug('content-encoding \"%s\"', encoding)\r\n\r\n  if (inflate === false && encoding !== 'identity') {\r\n    throw createError(415, 'content encoding unsupported', {\r\n      encoding: encoding,\r\n      type: 'encoding.unsupported'\r\n    })\r\n  }\r\n\r\n  switch (encoding) {\r\n    case 'deflate':\r\n      stream = zlib.createInflate()\r\n      debug('inflate body')\r\n      req.pipe(stream)\r\n      break\r\n    case 'gzip':\r\n      stream = zlib.createGunzip()\r\n      debug('gunzip body')\r\n      req.pipe(stream)\r\n      break\r\n    case 'identity':\r\n      stream = req\r\n      stream.length = length\r\n      break\r\n    default:\r\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\r\n        encoding: encoding,\r\n        type: 'encoding.unsupported'\r\n      })\r\n  }\r\n\r\n  return stream\r\n}\r\n\r\n/**\r\n * Dump the contents of a request.\r\n *\r\n * @param {object} req\r\n * @param {function} callback\r\n * @api private\r\n */\r\n\r\nfunction dump (req, callback) {\r\n  if (onFinished.isFinished(req)) {\r\n    callback(null)\r\n  } else {\r\n    onFinished(req, callback)\r\n    req.resume()\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}