{"ast":null,"code":"/*!\r\n * mime-types\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar db = require('mime-db');\nvar extname = require('path').extname;\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar TEXT_TYPE_REGEXP = /^text\\//i;\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nexports.charset = charset;\nexports.charsets = {\n  lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null);\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types);\n\n/**\r\n * Get the default charset for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\n\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && db[match[1].toLowerCase()];\n  if (mime && mime.charset) {\n    return mime.charset;\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8';\n  }\n  return false;\n}\n\n/**\r\n * Create a full Content-Type header given a MIME type or extension.\r\n *\r\n * @param {string} str\r\n * @return {boolean|string}\r\n */\n\nfunction contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;\n  if (!mime) {\n    return false;\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n  return mime;\n}\n\n/**\r\n * Get the default extension for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\n\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()];\n  if (!exts || !exts.length) {\n    return false;\n  }\n  return exts[0];\n}\n\n/**\r\n * Lookup the MIME type for a file path/extension.\r\n *\r\n * @param {string} path\r\n * @return {boolean|string}\r\n */\n\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path).toLowerCase().substr(1);\n  if (!extension) {\n    return false;\n  }\n  return exports.types[extension] || false;\n}\n\n/**\r\n * Populate the extensions and types maps.\r\n * @private\r\n */\n\nfunction populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n    if (!exts || !exts.length) {\n      return;\n    }\n\n    // mime -> extensions\n    extensions[type] = exts;\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue;\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type;\n    }\n  });\n}","map":{"version":3,"names":["db","require","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","exports","charset","charsets","lookup","contentType","extension","extensions","Object","create","types","populateMaps","type","match","exec","mime","toLowerCase","test","str","indexOf","exts","length","path","substr","preference","undefined","keys","forEach","forEachMimeType","i","from","source","to"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/mime-types/index.js"],"sourcesContent":["/*!\r\n * mime-types\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar db = require('mime-db')\r\nvar extname = require('path').extname\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\r\nvar TEXT_TYPE_REGEXP = /^text\\//i\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.charset = charset\r\nexports.charsets = { lookup: charset }\r\nexports.contentType = contentType\r\nexports.extension = extension\r\nexports.extensions = Object.create(null)\r\nexports.lookup = lookup\r\nexports.types = Object.create(null)\r\n\r\n// Populate the extensions/types maps\r\npopulateMaps(exports.extensions, exports.types)\r\n\r\n/**\r\n * Get the default charset for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction charset (type) {\r\n  if (!type || typeof type !== 'string') {\r\n    return false\r\n  }\r\n\r\n  // TODO: use media-typer\r\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\r\n  var mime = match && db[match[1].toLowerCase()]\r\n\r\n  if (mime && mime.charset) {\r\n    return mime.charset\r\n  }\r\n\r\n  // default text/* to utf-8\r\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\r\n    return 'UTF-8'\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Create a full Content-Type header given a MIME type or extension.\r\n *\r\n * @param {string} str\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction contentType (str) {\r\n  // TODO: should this even be in this module?\r\n  if (!str || typeof str !== 'string') {\r\n    return false\r\n  }\r\n\r\n  var mime = str.indexOf('/') === -1\r\n    ? exports.lookup(str)\r\n    : str\r\n\r\n  if (!mime) {\r\n    return false\r\n  }\r\n\r\n  // TODO: use content-type or other module\r\n  if (mime.indexOf('charset') === -1) {\r\n    var charset = exports.charset(mime)\r\n    if (charset) mime += '; charset=' + charset.toLowerCase()\r\n  }\r\n\r\n  return mime\r\n}\r\n\r\n/**\r\n * Get the default extension for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction extension (type) {\r\n  if (!type || typeof type !== 'string') {\r\n    return false\r\n  }\r\n\r\n  // TODO: use media-typer\r\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\r\n\r\n  // get extensions\r\n  var exts = match && exports.extensions[match[1].toLowerCase()]\r\n\r\n  if (!exts || !exts.length) {\r\n    return false\r\n  }\r\n\r\n  return exts[0]\r\n}\r\n\r\n/**\r\n * Lookup the MIME type for a file path/extension.\r\n *\r\n * @param {string} path\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction lookup (path) {\r\n  if (!path || typeof path !== 'string') {\r\n    return false\r\n  }\r\n\r\n  // get the extension (\"ext\" or \".ext\" or full path)\r\n  var extension = extname('x.' + path)\r\n    .toLowerCase()\r\n    .substr(1)\r\n\r\n  if (!extension) {\r\n    return false\r\n  }\r\n\r\n  return exports.types[extension] || false\r\n}\r\n\r\n/**\r\n * Populate the extensions and types maps.\r\n * @private\r\n */\r\n\r\nfunction populateMaps (extensions, types) {\r\n  // source preference (least -> most)\r\n  var preference = ['nginx', 'apache', undefined, 'iana']\r\n\r\n  Object.keys(db).forEach(function forEachMimeType (type) {\r\n    var mime = db[type]\r\n    var exts = mime.extensions\r\n\r\n    if (!exts || !exts.length) {\r\n      return\r\n    }\r\n\r\n    // mime -> extensions\r\n    extensions[type] = exts\r\n\r\n    // extension -> mime\r\n    for (var i = 0; i < exts.length; i++) {\r\n      var extension = exts[i]\r\n\r\n      if (types[extension]) {\r\n        var from = preference.indexOf(db[types[extension]].source)\r\n        var to = preference.indexOf(mime.source)\r\n\r\n        if (types[extension] !== 'application/octet-stream' &&\r\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\r\n          // skip the remapping\r\n          continue\r\n        }\r\n      }\r\n\r\n      // set the extension -> mime\r\n      types[extension] = type\r\n    }\r\n  })\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}