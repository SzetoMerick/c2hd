{"ast":null,"code":"/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n\n/**\r\n * Parse the Accept header.\r\n * @private\r\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept);\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i);\n    if (mediaType) {\n      accepts[j++] = mediaType;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n  return accepts;\n}\n\n/**\r\n * Parse a media type from the Accept header.\r\n * @private\r\n */\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str);\n  if (!match) return null;\n  var params = Object.create(null);\n  var q = 1;\n  var subtype = match[2];\n  var type = match[1];\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j];\n      var key = pair[0].toLowerCase();\n      var val = pair[1];\n\n      // get the value, unwrapping quotes\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"' ? val.substr(1, val.length - 2) : val;\n      if (key === 'q') {\n        q = parseFloat(value);\n        break;\n      }\n\n      // store parameter\n      params[key] = value;\n    }\n  }\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i\n  };\n}\n\n/**\r\n * Get the priority of a media type.\r\n * @private\r\n */\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index);\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n  return priority;\n}\n\n/**\r\n * Get the specificity of the media type.\r\n * @private\r\n */\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type);\n  var s = 0;\n  if (!p) {\n    return null;\n  }\n  if (spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4;\n  } else if (spec.type != '*') {\n    return null;\n  }\n  if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2;\n  } else if (spec.subtype != '*') {\n    return null;\n  }\n  var keys = Object.keys(spec.params);\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\n    })) {\n      s |= 1;\n    } else {\n      return null;\n    }\n  }\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n\n/**\r\n * Get the preferred media types from an Accept header.\r\n * @public\r\n */\n\nfunction preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\n  if (!provided) {\n    // sorted list of all types\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);\n  }\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index);\n  });\n\n  // sorted list of accepted types\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\r\n * Compare two specs.\r\n * @private\r\n */\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n\n/**\r\n * Get full type string.\r\n * @private\r\n */\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype;\n}\n\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n\n/**\r\n * Count the number of quotes in a string.\r\n * @private\r\n */\n\nfunction quoteCount(string) {\n  var count = 0;\n  var index = 0;\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++;\n    index++;\n  }\n  return count;\n}\n\n/**\r\n * Split a key value pair.\r\n * @private\r\n */\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=');\n  var key;\n  var val;\n  if (index === -1) {\n    key = str;\n  } else {\n    key = str.substr(0, index);\n    val = str.substr(index + 1);\n  }\n  return [key, val];\n}\n\n/**\r\n * Split an Accept header into media types.\r\n * @private\r\n */\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',');\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i];\n    } else {\n      accepts[j] += ',' + accepts[i];\n    }\n  }\n\n  // trim accepts\n  accepts.length = j + 1;\n  return accepts;\n}\n\n/**\r\n * Split a string of parameters.\r\n * @private\r\n */\n\nfunction splitParameters(str) {\n  var parameters = str.split(';');\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i];\n    } else {\n      parameters[j] += ';' + parameters[i];\n    }\n  }\n\n  // trim parameters\n  parameters.length = j + 1;\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim();\n  }\n  return parameters;\n}","map":{"version":3,"names":["module","exports","preferredMediaTypes","simpleMediaTypeRegExp","parseAccept","accept","accepts","splitMediaTypes","i","j","length","mediaType","parseMediaType","trim","str","match","exec","params","Object","create","q","subtype","type","kvps","splitParameters","map","splitKeyValuePair","pair","key","toLowerCase","val","value","substr","parseFloat","getMediaTypePriority","accepted","index","priority","o","s","spec","specify","p","keys","every","k","provided","undefined","filter","isQuality","sort","compareSpecs","getFullType","priorities","getPriority","getType","indexOf","a","b","quoteCount","string","count","split","parameters"],"sources":["D:/Documents/VS Code Projects/c2hd/c2hd/node_modules/negotiator/lib/mediaType.js"],"sourcesContent":["/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredMediaTypes;\r\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept header.\r\n * @private\r\n */\r\n\r\nfunction parseAccept(accept) {\r\n  var accepts = splitMediaTypes(accept);\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var mediaType = parseMediaType(accepts[i].trim(), i);\r\n\r\n    if (mediaType) {\r\n      accepts[j++] = mediaType;\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse a media type from the Accept header.\r\n * @private\r\n */\r\n\r\nfunction parseMediaType(str, i) {\r\n  var match = simpleMediaTypeRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var params = Object.create(null);\r\n  var q = 1;\r\n  var subtype = match[2];\r\n  var type = match[1];\r\n\r\n  if (match[3]) {\r\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\r\n\r\n    for (var j = 0; j < kvps.length; j++) {\r\n      var pair = kvps[j];\r\n      var key = pair[0].toLowerCase();\r\n      var val = pair[1];\r\n\r\n      // get the value, unwrapping quotes\r\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\r\n        ? val.substr(1, val.length - 2)\r\n        : val;\r\n\r\n      if (key === 'q') {\r\n        q = parseFloat(value);\r\n        break;\r\n      }\r\n\r\n      // store parameter\r\n      params[key] = value;\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: type,\r\n    subtype: subtype,\r\n    params: params,\r\n    q: q,\r\n    i: i\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of a media type.\r\n * @private\r\n */\r\n\r\nfunction getMediaTypePriority(type, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(type, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the media type.\r\n * @private\r\n */\r\n\r\nfunction specify(type, spec, index) {\r\n  var p = parseMediaType(type);\r\n  var s = 0;\r\n\r\n  if (!p) {\r\n    return null;\r\n  }\r\n\r\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\r\n    s |= 4\r\n  } else if(spec.type != '*') {\r\n    return null;\r\n  }\r\n\r\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\r\n    s |= 2\r\n  } else if(spec.subtype != '*') {\r\n    return null;\r\n  }\r\n\r\n  var keys = Object.keys(spec.params);\r\n  if (keys.length > 0) {\r\n    if (keys.every(function (k) {\r\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\r\n    })) {\r\n      s |= 1\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s,\r\n  }\r\n}\r\n\r\n/**\r\n * Get the preferred media types from an Accept header.\r\n * @public\r\n */\r\n\r\nfunction preferredMediaTypes(accept, provided) {\r\n  // RFC 2616 sec 14.2: no header = */*\r\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all types\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullType);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getMediaTypePriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted types\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full type string.\r\n * @private\r\n */\r\n\r\nfunction getFullType(spec) {\r\n  return spec.type + '/' + spec.subtype;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n\r\n/**\r\n * Count the number of quotes in a string.\r\n * @private\r\n */\r\n\r\nfunction quoteCount(string) {\r\n  var count = 0;\r\n  var index = 0;\r\n\r\n  while ((index = string.indexOf('\"', index)) !== -1) {\r\n    count++;\r\n    index++;\r\n  }\r\n\r\n  return count;\r\n}\r\n\r\n/**\r\n * Split a key value pair.\r\n * @private\r\n */\r\n\r\nfunction splitKeyValuePair(str) {\r\n  var index = str.indexOf('=');\r\n  var key;\r\n  var val;\r\n\r\n  if (index === -1) {\r\n    key = str;\r\n  } else {\r\n    key = str.substr(0, index);\r\n    val = str.substr(index + 1);\r\n  }\r\n\r\n  return [key, val];\r\n}\r\n\r\n/**\r\n * Split an Accept header into media types.\r\n * @private\r\n */\r\n\r\nfunction splitMediaTypes(accept) {\r\n  var accepts = accept.split(',');\r\n\r\n  for (var i = 1, j = 0; i < accepts.length; i++) {\r\n    if (quoteCount(accepts[j]) % 2 == 0) {\r\n      accepts[++j] = accepts[i];\r\n    } else {\r\n      accepts[j] += ',' + accepts[i];\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j + 1;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Split a string of parameters.\r\n * @private\r\n */\r\n\r\nfunction splitParameters(str) {\r\n  var parameters = str.split(';');\r\n\r\n  for (var i = 1, j = 0; i < parameters.length; i++) {\r\n    if (quoteCount(parameters[j]) % 2 == 0) {\r\n      parameters[++j] = parameters[i];\r\n    } else {\r\n      parameters[j] += ';' + parameters[i];\r\n    }\r\n  }\r\n\r\n  // trim parameters\r\n  parameters.length = j + 1;\r\n\r\n  for (var i = 0; i < parameters.length; i++) {\r\n    parameters[i] = parameters[i].trim();\r\n  }\r\n\r\n  return parameters;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}